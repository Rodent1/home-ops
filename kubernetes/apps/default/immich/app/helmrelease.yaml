---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app immich
  namespace: default
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 2.0.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    defaultPodOptions:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: "OnRootMismatch"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app

    controllers:
      main:
        enabled: false
      server:
        annotations:
          configmap.reloader.stakater.com/reload: &configMap immich-configmap
          secret.reloader.stakater.com/reload: &secret immich-secret
        type: deployment
        strategy: RollingUpdate
        replicas: 2
        initContainers:
          01-init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 14.9
              imagePullPolicy: IfNotPresent
            envFrom: &envFrom
              - configMapRef:
                  name: *configMap
              - secretRef:
                  name: *secret
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.84.0
              imagePullPolicy: IfNotPresent
            args: ["start-server.sh"]
            envFrom: *envFrom

      machine-learning:
        annotations:
          configmap.reloader.stakater.com/reload: *configMap
          secret.reloader.stakater.com/reload: *secret
        type: deployment
        strategy: Recreate
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.84.0
              imagePullPolicy: IfNotPresent
            envFrom: *envFrom

      microservices:
        annotations:
          configmap.reloader.stakater.com/reload: *configMap
          secret.reloader.stakater.com/reload: *secret
        type: deployment
        strategy: Recreate
        replicas: 2
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.84.0
              imagePullPolicy: IfNotPresent

            args: ["start-microservices.sh"]

            envFrom: *envFrom


      typesense:
        annotations:
          configmap.reloader.stakater.com/reload: *configMap
          secret.reloader.stakater.com/reload: *secret
        type: statefulset
        strategy: RollingUpdate
        containers:
          main:
            image:
              repository: docker.io/typesense/typesense
              tag: 0.25.1
              imagePullPolicy: IfNotPresent
            envFrom: *envFrom
            probes:
              liveness: &typesenseProbes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: &typesensePort 8108
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *typesenseProbes
              startup:
                enabled: false
        statefulset:
          volumeClaimTemplates:
            - name: config
              globalMounts:
                - path: /config
              accessMode: ReadWriteOnce
              size: 1Gi
              storageClass: ceph-block

    service:
      server:
        controller: server
        ports:
          http:
            port: 3001
      machine-learning:
        controller: machine-learning
        ports:
          http:
            port: 3003
      typesense:
        controller: typesense
        ports:
          http:
            port: *typesensePort
      web:
        controller: web
        ports:
          http:
            port: 3000
      microservices:
        controller: microservices
        enabled: false

    ingress:
      main:
        enabled: true
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
          nginx.ingress.kubernetes.io/configuration-snippet: |
            rewrite /api/(.*) /$1 break;
            set $forwarded_client_ip "";
            if ($http_x_forwarded_for ~ "^([^,]+)") {
              set $forwarded_client_ip $1;
            }
            set $client_ip $remote_addr;
            if ($forwarded_client_ip != "") {
              set $client_ip $forwarded_client_ip;
            }
          nignx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
          nginx.ingress.kubernetes.io/upstream-hash-by: "$client_ip"

        hosts:
          - host: &host photos.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  name: web
                  port: 3000
              - path: /api
                pathType: Prefix
                service:
                  name: server
                  port: 3001
        tls:
          - hosts:
              - *host

    persistence:
      library:
        type: persistentVolumeClaim
        existingClaim: immich-nfs
        globalMounts:
          - path: /usr/src/app/upload
            subPath: Immich

      cache:
        type: emptyDir

      geocoding-dump:
        type: emptyDir
        advancedMounts:
          machine-learning:
            main:
              - path: /usr/src/app/.reverse-geocoding-dump
                readOnly: false

      transformers-cache:
        type: emptyDir
        advancedMounts:
          machine-learning:
            main:
              - path: /usr/src/app/.transformers_cache
                readOnly: false
