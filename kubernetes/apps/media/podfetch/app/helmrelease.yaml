---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: podfetch
  namespace: media
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 2.0.3
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: rook-ceph-cluster
      namespace: rook-ceph
    - name: cloudnative-pg
      namespace: database
    - name: volsync
      namespace: backup
  values:
    defaultPodOptions:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [44, 105, 10000]
    controllers:
      main:
        type: statefulset
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          01-init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 14.9
              imagePullPolicy: IfNotPresent

            envFrom: &envFrom
              - secretRef:
                  name: podfetch-secret
        containers:
          main:
            image:
              repository: samuel19982/podfetch
              tag: v4.4.0-postgres-b2febd8@sha256:55aaf228859e66bc3032e984a3420268c5217e92aba6318f0ab07c14d50eda22
            env:
              TZ: ${TIMEZONE}
              POLLING_INTERVAL: 300
              SERVER_URL: https://podfetch.${SECRET_DOMAIN}
              OIDC_AUTH: true
            envFrom: *envFrom
            resources:
              requests:
                cpu: 100m
                memory: 100m
              limits:
                memory: 1Gi
        statefulset:
          volumeClaimTemplates:
            - name: podcasts
              accessMode: ReadWriteOnce
              size: 100Gi
              storageClass: ceph-block
              globalMounts:
                - path: /app/podcasts
    service:
      main:
        ports:
          http:
            port: 80
    ingress:
      main:
        enabled: true
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
          nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *host
    persistence:
      transcode:
        type: emptyDir
      media:
        type: nfs
        server: ${TRUENAS_IP}
        path: /mnt/tank/Media
        globalMounts:
          - path: /media
