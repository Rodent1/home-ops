---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app immich
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 2.6.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: cloudnative-pg
      namespace: database
    - name: dragonfly
      namespace: database
    - name: rook-ceph-cluster
      namespace: rook-ceph
    - name: volsync
      namespace: system
  values:
    defaultPodOptions:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: "OnRootMismatch"
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: *app
    controllers:
      main:
        annotations:
          reloader.stakater.com/auto: "true"
        type: deployment
        strategy: RollingUpdate
        replicas: 1
        initContainers:
          01-init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16
              imagePullPolicy: IfNotPresent
            envFrom: &envFrom
              - configMapRef:
                  name: immich-configmap
              - secretRef:
                  name: immich-secret
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.98.2@sha256:5d46c02f171b2c85c5c445ed9ae233d68568b241e14e293b0195d539b98de42a
              imagePullPolicy: IfNotPresent
            args: ["start-server.sh"]
            envFrom: *envFrom
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
                memory: 144M
              limits:
                memory: 256Mi
      microservices:
        type: deployment
        replicas: 1
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.98.2@sha256:5d46c02f171b2c85c5c445ed9ae233d68568b241e14e293b0195d539b98de42a
              imagePullPolicy: IfNotPresent
            args: ["start-microservices.sh"]
            envFrom: *envFrom
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
                gpu.intel.com/i915: 1
                memory: 500Mi
              limits:
                gpu.intel.com/i915: 1
                memory: 500Mi
      machine-learning:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          main:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.98.2@sha256:ac21ed6160c106eb26f704626d1fbf693dd74640131afd4d2ccad5db26aa98c5
              imagePullPolicy: IfNotPresent
            envFrom: *envFrom
            resources:
              requests:
                cpu: 10m
                memory: 2Gi
              limits:
                memory: 2Gi
    service:
      main:
        ports:
          http:
            port: 3001
      machine-learning:
        controller: machine-learning
        ports:
          http:
            port: 3003
    ingress:
      main:
        enabled: true
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
          nginx.ingress.kubernetes.io/configuration-snippet: |
            set $forwarded_client_ip "";
            if ($http_x_forwarded_for ~ "^([^,]+)") {
              set $forwarded_client_ip $1;
            }
            set $client_ip $remote_addr;
            if ($forwarded_client_ip != "") {
              set $client_ip $forwarded_client_ip;
            }
          nignx.ingress.kubernetes.io/force-ssl-redirect: "true"
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
          nginx.ingress.kubernetes.io/upstream-hash-by: "$client_ip"
        hosts:
          - host: &host photos.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  name: main
                  port: 3001
        tls:
          - hosts:
              - *host
    persistence:
      library:
        enabled: true
        existingClaim: config-immich
        globalMounts:
          - path: /usr/src/app/upload
            subPath: Immich
      cache:
        type: emptyDir
        advancedMounts:
          machine-learning:
            main:
              - path: /cache
      geocoding-dump:
        type: emptyDir
        advancedMounts:
          machine-learning:
            main:
              - path: /usr/src/app/.reverse-geocoding-dump
      transformers-cache:
        type: emptyDir
        advancedMounts:
          machine-learning:
            main:
              - path: /usr/src/app/.transformers_cache
