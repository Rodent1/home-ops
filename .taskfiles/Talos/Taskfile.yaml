---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  TALHELPER_SECRET_FILE: "{{.KUBERNETES_DIR}}/main/bootstrap/talos/talsecret.sops.yaml"
  TALHELPER_CONFIG_FILE: "{{.KUBERNETES_DIR}}/main/bootstrap/talos/talconfig.yaml"
  # renovate: datasource=docker depName=ghcr.io/siderolabs/installer
  TALOS_VERSION: v1.6.4
  TALOS_SCHEMATIC_ID: d715f723f882b1e1e8063f1b89f237dcc0e3bd000f9f970243af59c8baae0100
  # renovate: datasource=docker depName=ghcr.io/siderolabs/kubelet
  KUBERNETES_VERSION: v1.29.2

tasks:

  bootstrap:
    desc: Bootstrap Talos
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        controller: Controller node to run command against (required)
    prompt: Bootstrap Talos on the '{{.cluster}}' cluster... continue?
    cmds:
      - task: bootstrap-etcd
        vars: &vars
          cluster: "{{.cluster}}"
          controller: "{{.controller}}"
      - task: fetch-kubeconfig
        vars: *vars
      - task: bootstrap-apps
        vars: *vars
    requires:
      vars: ["cluster", "controller"]

  bootstrap-etcd:
    desc: Bootstrap Etcd
    cmd: until talosctl --context {{.cluster}} --nodes {{.controller}} bootstrap; do sleep 10; done
    requires:
      vars: ["cluster", "controller"]
    preconditions:
      - talosctl config get-contexts | grep {{.cluster}}

  bootstrap-apps:
    desc: Bootstrap core apps needed for Talos
    cmds:
      - until kubectl --context {{.cluster}} wait --for=condition=Ready=False nodes --all --timeout=600s; do sleep 10; done
      - helmfile --quiet --kube-context {{.cluster}} --file {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --context {{.cluster}} wait --for=condition=Ready nodes --all --timeout=600s; do sleep 10; done
    env:
      CLUSTER_DIR: "{{.KUBERNETES_DIR}}/{{.cluster}}" # required for helmfile
    requires:
      vars: ["cluster"]
    preconditions:
      - kubectl config get-contexts {{.cluster}}
      - test -f {{.KUBERNETES_DIR}}/{{.cluster}}/bootstrap/talos/apps/helmfile.yaml

  upgrade-talos:
    desc: Upgrade Talos on a node
    cmd: talosctl --context {{.cluster}} --nodes {{.node}} upgrade --image {{.image}} --preserve=true
    requires:
      vars: ["node", "image"]
    preconditions:
      - talosctl config get-contexts | grep {{.cluster}}
      - talosctl --context {{.cluster}} --nodes {{.node}} get machineconfig >/dev/null 2>&1

  upgrade-k8s:
    desc: Upgrade k8s on a node
    cmd: talosctl --context {{.cluster}} --nodes {{.node}} upgrade-k8s --to {{.to}}
    requires:
      vars: ["node", "to"]
    preconditions:
      - talosctl config get-contexts | grep {{.cluster}}
      - talosctl --context {{.cluster}} --nodes {{.node}} get machineconfig >/dev/null 2>&1

  fetch-kubeconfig:
    desc: Fetch kubeconfig from Talos controllers
    cmd: |
      talosctl --context {{.cluster}} kubeconfig --nodes {{.controller}} \
          --force --force-context-name {{.cluster}} {{.KUBERNETES_DIR}}/{{.cluster}}
    requires:
      vars: ["cluster"]
    preconditions:
      - talosctl config get-contexts | grep {{.cluster}}

  apply-config:
    desc: Apply Talos config to the nodes
    dir: "{{.KUBERNETES_DIR}}/main/bootstrap/talos"
    cmd: talhelper gencommand apply | bash

  genconfig:
    desc: Generate Talos config
    dir: "{{.KUBERNETES_DIR}}/main/bootstrap/talos"
    cmd: talhelper genconfig
    preconditions:
      - { msg: "Missing talhelper config file", sh: "test -f {{.TALHELPER_CONFIG_FILE}}" }
