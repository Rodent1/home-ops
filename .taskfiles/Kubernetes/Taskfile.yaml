---
version: "3"

tasks:

  kubeconfig:
    desc: Download kubeconfig from a remote k3s master node
    vars:
      MASTER_USERNAME: '{{.MASTER_USERNAME | default "stianrs"}}'
      MASTER_HOST: '{{.MASTER_HOST | default "10.1.1.40"}}'
      KUBERNETES_API: '{{.KUBERNETES_API | default "10.1.1.254"}}'
    cmds:
      - rsync --verbose --progress --partial --rsync-path="rsync" {{.MASTER_USERNAME}}@{{.MASTER_HOST}}:/etc/rancher/k3s/k3s.yaml "${KUBECONFIG}"
      - sed -i 's/127.0.0.1/{{.KUBERNETES_API}}/g' "${KUBECONFIG}"
      - chmod go-r "${KUBECONFIG}"

  schemas:
    desc: Pull the latest CRD schemas for this cluster
    cmds:
      - mkdir -p {{.CLUSTER_DIR}}/schemas
      - flux pull artifact oci://ghcr.io/rodent1/kubernetes-schemas-oci:latest \
          --output={{.CLUSTER_DIR}}/schemas

  mount:
    desc: Mount a PersistentVolumeClaim to a temporary pod for a cluster
    summary: |
      Args:
        cluster: Cluster to run command against (required)
        ns: Namespace the PVC is in (default: default)
        claim: PVC to mount (required)
    interactive: true
    cmd: |
      kubectl --context {{.cluster}} run -n {{.ns}} debug-{{.claim}} -i --tty --rm --image=null --privileged --overrides='
        {
          "apiVersion": "v1",
          "spec": {
            "containers": [
              {
                "name": "debug",
                "image": "ghcr.io/onedr0p/alpine:rolling",
                "command": ["/bin/bash"],
                "stdin": true,
                "stdinOnce": true,
                "tty": true,
                "volumeMounts": [
                  {
                    "name": "config",
                    "mountPath": "/config"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "config",
                "persistentVolumeClaim": {
                  "claimName": "{{.claim}}"
                }
              }
            ],
            "restartPolicy": "Never"
          }
        }'
    vars:
      ns: '{{.ns | default "default"}}'
      claim: '{{ or .claim (fail "Argument (claim) is required") }}'
    preconditions:
      - { msg: "Argument (cluster) is required", sh: "test -n {{.cluster}}" }
      - { msg: "PVC not found",                  sh: "kubectl --context {{.cluster}} -n {{.ns}} get persistentvolumeclaim {{.claim}}" }
